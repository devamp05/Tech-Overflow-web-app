{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\PostList.js\",\n  _s = $RefreshSig$();\n// import { Link, useParams } from \"react-router-dom\";\n// import { useState, useEffect } from \"react\";\n// import Post from \"./Post\";\n// import \"./PostList.css\";\n\n// function PostList() {\n//   const [getList, setList] = useState([]);\n\n//   const {username, channelId} = useParams();\n//   // To call get() everytime on load\n//   useEffect(() => {\n//     get();\n//   });\n//   function get()\n//   {\n//     fetch(\n//       'http://localhost:8080/getPosts?channelId='+channelId\n//     ).then(response => response.json()).then(response => setList(response)).catch(error => console.error(error))\n//   }\n//     return (\n//       <>\n//         Get all the Posts here\n//         {getList.map(post => (\n//           <div className=\"container\">\n//             <Post post={post} username={username} />\n//           </div>\n//         ))}\n//         <br></br>\n//         <Link to={`/addPost/${username}/${channelId}`}>Add Post</Link>\n//         <br></br>\n//         <Link to={`/getChannels/${username}`}>channels</Link>\n//         <br></br>\n//         <Link to='/'>Landings</Link>\n//       </>\n//     );\n//   }\n\n//   export default PostList;\n\nimport { Link, useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport Post from \"./Post\";\nimport \"./PostList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PostList() {\n  _s();\n  const [getList, setList] = useState([]);\n  const {\n    username,\n    channelId\n  } = useParams();\n\n  // To call get() only once on mount, use an empty dependency array\n  useEffect(() => {\n    get();\n  }, []);\n  function get() {\n    fetch(`http://localhost:8080/getPosts?channelId=${channelId}`).then(response => response.json()).then(response => setList(response)).catch(error => console.error(error));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: getList.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.topic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/post/${post.id}/${username}/${channelId}`,\n          children: \"Read More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/addPost/${username}/${channelId}`,\n      children: \"Add Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/getChannels/${username}`,\n      children: \"Channels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: \"Landings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(PostList, \"PgM8BumK0bWvakspuRe9cpk8bk8=\", false, function () {\n  return [useParams];\n});\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["Link","useParams","useState","useEffect","Post","jsxDEV","_jsxDEV","Fragment","_Fragment","PostList","_s","getList","setList","username","channelId","get","fetch","then","response","json","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","post","topic","content","to","id","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/PostList.js"],"sourcesContent":["// import { Link, useParams } from \"react-router-dom\";\r\n// import { useState, useEffect } from \"react\";\r\n// import Post from \"./Post\";\r\n// import \"./PostList.css\";\r\n\r\n// function PostList() {\r\n//   const [getList, setList] = useState([]);\r\n  \r\n//   const {username, channelId} = useParams();\r\n//   // To call get() everytime on load\r\n//   useEffect(() => {\r\n//     get();\r\n//   });\r\n//   function get()\r\n//   {\r\n//     fetch(\r\n//       'http://localhost:8080/getPosts?channelId='+channelId\r\n//     ).then(response => response.json()).then(response => setList(response)).catch(error => console.error(error))\r\n//   }\r\n//     return (\r\n//       <>\r\n//         Get all the Posts here\r\n//         {getList.map(post => (\r\n//           <div className=\"container\">\r\n//             <Post post={post} username={username} />\r\n//           </div>\r\n//         ))}\r\n//         <br></br>\r\n//         <Link to={`/addPost/${username}/${channelId}`}>Add Post</Link>\r\n//         <br></br>\r\n//         <Link to={`/getChannels/${username}`}>channels</Link>\r\n//         <br></br>\r\n//         <Link to='/'>Landings</Link>\r\n//       </>\r\n//     );\r\n//   }\r\n  \r\n//   export default PostList;\r\n\r\n\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Post from \"./Post\";\r\nimport \"./PostList.css\";\r\n\r\nfunction PostList() {\r\n  const [getList, setList] = useState([]);\r\n\r\n  const { username, channelId } = useParams();\r\n\r\n  // To call get() only once on mount, use an empty dependency array\r\n  useEffect(() => {\r\n    get();\r\n  }, []);\r\n\r\n  function get() {\r\n    fetch(`http://localhost:8080/getPosts?channelId=${channelId}`)\r\n      .then(response => response.json())\r\n      .then(response => setList(response))\r\n      .catch(error => console.error(error));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>All Posts</h2>\r\n      <div className=\"post-list\">\r\n        {getList.map(post => (\r\n          <div key={post.id} className=\"post-card\">\r\n            <h3>{post.topic}</h3>\r\n            <p>{post.content}</p>\r\n            {/* You can add more details from the 'post' object */}\r\n            <Link to={`/post/${post.id}/${username}/${channelId}`}>Read More</Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <br />\r\n      <Link to={`/addPost/${username}/${channelId}`}>Add Post</Link>\r\n      <br />\r\n      <Link to={`/getChannels/${username}`}>Channels</Link>\r\n      <br />\r\n      <Link to=\"/\">Landings</Link>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PostList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}