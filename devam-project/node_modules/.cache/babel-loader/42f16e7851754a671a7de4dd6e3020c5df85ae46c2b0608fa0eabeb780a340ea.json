{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\CommentsList.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n\n// function CommentLists({postId})\n// {\n//     const [getList, setList] = useState([]);\n//     // To call geCommentst() everytime on load\n//     useEffect(() => {\n//         getComments();\n//     });\n//     function getComments()\n//     {\n//         fetch('http://localhost:8080/getComments?postId='+postId,\n//         {\n//             method: 'GET',\n//             // body: new URLSearchParams({\n//             //     postId: postId\n//             //     }),\n//             headers: {\n//                 \"Content-type\": \"application/x-www-form-urlencoded\"\n//                 }\n//         }\n//         ).then(response => response.json()).then(response => setList(response)).catch(error => console.error(error))\n//         // console.log(getList);\n//     }\n//     return(\n//         <div className=\"commentsListClass\" >\n//             get posted comments here\n//             {getList.map(comment => (\n//             <div>                \n//                 <p> {comment.comment}</p>\n//             </div>\n//             ))}\n//         </div>\n//     )\n// };\n\n// export default CommentLists;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './CommentList.css'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CommentList() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const {\n    postId\n  } = useParams();\n  useEffect(() => {\n    getComments();\n  }); // Include postId in the dependency array\n\n  function getComments() {\n    fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response.json()).then(response => setComments(response)).catch(error => console.error(error));\n  }\n\n  // To fetch the child comments if there are any\n  function fetchChildComments(commentId, indentLevel = 1) {\n    fetch(`http://localhost:8080/getChildComments?commentId=${commentId}`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response.json()).then(childComments => {\n      // Recursively fetch and display child comments\n      childComments.forEach(childComment => {\n        fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\n      });\n\n      setComments([...comments, {\n        ...childComments[0],\n        indentLevel\n      }]); // Update state with both parent and child comments\n    }).catch(error => console.error(error));\n  }\n\n  // return (\n  //   <div className=\"commentsListClass\">\n  //     <p>Posted comments:</p>\n  //     {comments.map((comment) => (\n  //       <div key={comment.id} className=\"comment-item\">\n  //         <p>\n  //           <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n  //         </p>\n  //         {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.id, comment.indentLevel)}\n  //       </div>\n  //     ))}\n  //   </div>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"commentsListClass\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Posted comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `comment-item indent-${comment.indentLevel}`,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"comment-username\",\n          children: [comment.createdBy, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), \" \", comment.comment]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reply-button\",\n        onClick: () => handleReply(comment.id),\n        children: [\"Reply \", /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), comment.numbe_of_child_comments > 0 && fetchChildComments(comment.id, comment.indentLevel)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentList, \"mjcMEWhdGVTbN+/eoGitwcL61mI=\", false, function () {\n  return [useParams];\n});\n_c = CommentList;\nexport default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","CommentList","_s","comments","setComments","postId","getComments","fetch","method","headers","then","response","json","catch","error","console","fetchChildComments","commentId","indentLevel","childComments","forEach","childComment","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","comment","createdBy","onClick","handleReply","numbe_of_child_comments","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/CommentsList.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n\r\n\r\n// function CommentLists({postId})\r\n// {\r\n//     const [getList, setList] = useState([]);\r\n//     // To call geCommentst() everytime on load\r\n//     useEffect(() => {\r\n//         getComments();\r\n//     });\r\n//     function getComments()\r\n//     {\r\n//         fetch('http://localhost:8080/getComments?postId='+postId,\r\n//         {\r\n//             method: 'GET',\r\n//             // body: new URLSearchParams({\r\n//             //     postId: postId\r\n//             //     }),\r\n//             headers: {\r\n//                 \"Content-type\": \"application/x-www-form-urlencoded\"\r\n//                 }\r\n//         }\r\n//         ).then(response => response.json()).then(response => setList(response)).catch(error => console.error(error))\r\n//         // console.log(getList);\r\n//     }\r\n//     return(\r\n//         <div className=\"commentsListClass\" >\r\n//             get posted comments here\r\n//             {getList.map(comment => (\r\n//             <div>                \r\n//                 <p> {comment.comment}</p>\r\n//             </div>\r\n//             ))}\r\n//         </div>\r\n//     )\r\n// };\r\n\r\n// export default CommentLists;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './CommentList.css'; // Import your CSS file\r\n\r\nfunction CommentList() {\r\n  const [comments, setComments] = useState([]);\r\n  const { postId } = useParams();\r\n\r\n  useEffect(() => {\r\n    getComments();\r\n  }); // Include postId in the dependency array\r\n\r\n  function getComments() {\r\n    fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => setComments(response))\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  // To fetch the child comments if there are any\r\n  function fetchChildComments(commentId, indentLevel = 1) {\r\n    fetch(`http://localhost:8080/getChildComments?commentId=${commentId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((childComments) => {\r\n        // Recursively fetch and display child comments\r\n        childComments.forEach((childComment) => {\r\n          fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\r\n        });\r\n        setComments([...comments, { ...childComments[0], indentLevel }]); // Update state with both parent and child comments\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  // return (\r\n  //   <div className=\"commentsListClass\">\r\n  //     <p>Posted comments:</p>\r\n  //     {comments.map((comment) => (\r\n  //       <div key={comment.id} className=\"comment-item\">\r\n  //         <p>\r\n  //           <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n  //         </p>\r\n  //         {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.id, comment.indentLevel)}\r\n  //       </div>\r\n  //     ))}\r\n  //   </div>\r\n  // );\r\n\r\n  return (\r\n    <div className=\"commentsListClass\">\r\n      <p>Posted comments:</p>\r\n      {comments.map((comment) => (\r\n        <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n          <p>\r\n            <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n          </p>\r\n          <button className=\"reply-button\" onClick={() => handleReply(comment.id)}>\r\n            Reply <i className=\"fa fa-reply\"></i>\r\n          </button>\r\n          {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.id, comment.indentLevel)}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default CommentList;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}