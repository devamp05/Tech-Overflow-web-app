{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\CommentsList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './CommentList.css';\n\n// function CommentList() {\n//   const [comments, setComments] = useState([]);\n//   const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\n//   const [newComment, setNewComment] = useState(''); // Track the content of the new comment\n//   const { username, postId } = useParams();\n\n//   function getComments() {\n//     fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     })\n//       .then((response) => response.json())\n//       .then((response) => setComments(response))\n//       .catch((error) => console.error(error));\n//   }\n\n//  useEffect(() => {\n//   getComments();\n// }, []);\n\n// function fetchChildComments(commentId, indentLevel = 1) {\n//   fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n//     method: 'GET',\n//     headers: {\n//       'Content-type': 'application/x-www-form-urlencoded',\n//     },\n//   })\n//     .then((response) => response.json())\n//     .then((childComments) => {\n//       if (childComments.length > 0) {\n//         const childCommentsWithIndent = childComments.map((childComment) => ({\n//           ...childComment,\n//           indentLevel,\n//         }));\n//         setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\n\n//         // Recursively fetch and display child comments\n//         childComments.forEach((childComment) => {\n//           if (childComment.numbe_of_child_comments > 0) {\n//             fetchChildComments(childComment.id, indentLevel + 1);\n//           }\n//         });\n//       }\n//     })\n//     .catch((error) => console.error(error));\n// }\n\n//   function handleReply(commentId) {\n//     // Set the comment being replied to and clear the new comment input\n//     setReplyingTo(commentId);\n//     setNewComment('');\n//   }\n\n//   function handleCancelReply() {\n//     // Clear the comment being replied to\n//     setReplyingTo(null);\n//   }\n\n//   function handlePostReply(commentId) {\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\n\n//     // Add the comment in the database\n//     fetch('http://localhost:8080/addChildComment', {\n//       method: 'POST',\n//       body: new URLSearchParams({\n//         username: username,\n//         comment: newComment,\n//         parentId: commentId\n//       }),\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       }\n//     }).then((response) => response)\n//     .then((data)=> console.log(data))\n//     .catch(error => console.log(error));\n\n//     // Clear the comment being replied to and reset the new comment input\n//     setReplyingTo(null);\n//     setNewComment('');\n//   }\n\n//   return (\n//     <div className=\"commentsListClass\">\n//       <p>Posted comments:</p>\n//       {comments.map((comment) => (\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\n//           <div className=\"comment-content\">\n//             <p>\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n//             </p>\n//           </div>\n//           <div className=\"reply-button-container\">\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\n//               Reply <i className=\"fa fa-reply\"></i>\n//             </button>\n//           </div>\n//           {comment.numbe_of_child_comments}\n//           {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\n//           {replyingTo === comment.c_id && (\n//             <div className=\"reply-input-container\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Type your reply...\"\n//                 value={newComment}\n//                 onChange={(e) => setNewComment(e.target.value)}\n//               />\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\n//                 Post Reply\n//               </button>\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\n//                 Cancel\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n\n// };\n\n// export default CommentList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './CommentList.css';\n\n// function CommentList() {\n//   const [comments, setComments] = useState([]);\n//   const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\n//   const [newComment, setNewComment] = useState(''); // Track the content of the new comment\n//   const { username, postId } = useParams();\n\n//   async function getComments() {\n//     const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     });\n\n//     const data = await response.json();\n//     setComments(data);\n//   }\n\n//   async function fetchChildComments(commentId, indentLevel = 1) {\n//     const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     });\n\n//     const childComments = await response.json();\n\n//     if (childComments.length > 0) {\n//       const childCommentsWithIndent = childComments.map((childComment) => ({\n//         ...childComment,\n//         indentLevel,\n//       }));\n\n//       // Recursively fetch and display child comments\n//       await Promise.all(\n//         childCommentsWithIndent.map(async (childComment) => {\n//           if (childComment.numbe_of_child_comments > 0) {\n//             await fetchChildComments(childComment.id, indentLevel + 1);\n//           }\n//         })\n//       );\n\n//       // Update the state with the new child comments\n//       setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\n//     }\n//   }\n\n//   useEffect(() => {\n//     getComments();\n//   }, []);\n\n//   function handleReply(commentId) {\n//     // Set the comment being replied to and clear the new comment input\n//     setReplyingTo(commentId);\n//     setNewComment('');\n//   }\n\n//   function handleCancelReply() {\n//     // Clear the comment being replied to\n//     setReplyingTo(null);\n//   }\n\n//   async function handlePostReply(commentId) {\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\n\n//     // Add the comment in the database\n//     await fetch('http://localhost:8080/addChildComment', {\n//       method: 'POST',\n//       body: new URLSearchParams({\n//         username: username,\n//         comment: newComment,\n//         parentId: commentId,\n//       }),\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     });\n\n//     // get the comments\n//     await getComments();\n\n//     // Clear the comment being replied to and reset the new comment input\n//     setReplyingTo(null);\n//     setNewComment('');\n//   }\n\n//   return (\n//     <div className=\"commentsListClass\">\n//       <p>Posted comments:</p>\n//       {comments.map((comment) => (\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\n//           <div className=\"comment-content\">\n//             <p>\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n//             </p>\n//           </div>\n//           <div className=\"reply-button-container\">\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\n//               Reply <i className=\"fa fa-reply\"></i>\n//             </button>\n//           </div>\n//           {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\n//           {replyingTo === comment.c_id && (\n//             <div className=\"reply-input-container\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Type your reply...\"\n//                 value={newComment}\n//                 onChange={(e) => setNewComment(e.target.value)}\n//               />\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\n//                 Post Reply\n//               </button>\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\n//                 Cancel\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default CommentList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './CommentList.css';\n\n// function CommentList() {\n//   const [comments, setComments] = useState([]);\n//   const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\n//   const [newComment, setNewComment] = useState(''); // Track the content of the new comment\n//   const { username, postId } = useParams();\n\n//   async function getComments() {\n//     const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     });\n\n//     const data = await response.json();\n//     setComments(data);\n\n//     // Fetch child comments when the component mounts\n//     if (data.length > 0) {\n//       data.forEach((comment) => {\n//         if (comment.numbe_of_child_comments > 0) {\n//           fetchChildComments(comment.c_id, comment.indentLevel);\n//         }\n//       });\n//     }\n//   }\n\n//   async function fetchChildComments(commentId, indentLevel = 1) {\n//     const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     });\n\n//     const childComments = await response.json();\n\n//     if (childComments.length > 0) {\n//       const childCommentsWithIndent = childComments.map((childComment) => ({\n//         ...childComment,\n//         indentLevel,\n//       }));\n\n//       // Recursively fetch and display child comments\n//       await Promise.all(\n//         childCommentsWithIndent.map(async (childComment) => {\n//           if (childComment.numbe_of_child_comments > 0) {\n//             await fetchChildComments(childComment.id, indentLevel + 1);\n//           }\n//         })\n//       );\n\n//       // Update the state with the new child comments\n//       setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\n//     }\n//   }\n\n//   useEffect(() => {\n//     getComments();\n//   }, []);\n\n//   function handleReply(commentId) {\n//     // Set the comment being replied to and clear the new comment input\n//     setReplyingTo(commentId);\n//     setNewComment('');\n//   }\n\n//   function handleCancelReply() {\n//     // Clear the comment being replied to\n//     setReplyingTo(null);\n//   }\n\n//   async function handlePostReply(commentId) {\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\n\n//     // Add the comment in the database\n//     await fetch('http://localhost:8080/addChildComment', {\n//       method: 'POST',\n//       body: new URLSearchParams({\n//         username: username,\n//         comment: newComment,\n//         parentId: commentId,\n//       }),\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     });\n\n//     // get the comments\n//     await getComments();\n\n//     // Clear the comment being replied to and reset the new comment input\n//     setReplyingTo(null);\n//     setNewComment('');\n//   }\n\n//   return (\n//     <div className=\"commentsListClass\">\n//       <p>Posted comments:</p>\n//       {comments.map((comment) => (\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\n//           <div className=\"comment-content\">\n//             <p>\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n//             </p>\n//           </div>\n//           <div className=\"reply-button-container\">\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\n//               Reply <i className=\"fa fa-reply\"></i>\n//             </button>\n//           </div>\n//           {comment.numbe_of_child_comments > 0 && (\n//             <div className={`child-comments indent-${comment.indentLevel + 1}`}>\n//               {comments\n//                 .filter((childComment) => childComment.parentId === comment.c_id)\n//                 .map((childComment) => (\n//                   <div key={childComment.id} className={`comment-item indent-${childComment.indentLevel}`}>\n//                     <div className=\"comment-content\">\n//                       <p>\n//                         <span className=\"comment-username\">{childComment.createdBy}:</span> {childComment.comment}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 ))}\n//             </div>\n//           )}\n//           {replyingTo === comment.c_id && (\n//             <div className=\"reply-input-container\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Type your reply...\"\n//                 value={newComment}\n//                 onChange={(e) => setNewComment(e.target.value)}\n//               />\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\n//                 Post Reply\n//               </button>\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\n//                 Cancel\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default CommentList;\n\n// function CommentList() {\n//   const [comments, setComments] = useState([]);\n//   const [childComments, setChildComments] = useState({});\n//   const [replyingTo, setReplyingTo] = useState(null);\n//   const [newComment, setNewComment] = useState('');\n//   const { username, postId } = useParams();\n\n//   async function getComments() {\n//     const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     });\n\n//     const data = await response.json();\n//     setComments(data);\n\n//     // Fetch child comments for each parent comment\n//     const childCommentsMap = {};\n//     await Promise.all(\n//       data.map(async (comment) => {\n//         if (comment.numbe_of_child_comments > 0) {\n//           const childResponse = await fetch(`http://localhost:8080/getChildComments?parentId=${comment.c_id}`, {\n//             method: 'GET',\n//             headers: {\n//               'Content-type': 'application/x-www-form-urlencoded',\n//             },\n//           });\n\n//           const childData = await childResponse.json();\n//           childCommentsMap[comment.c_id] = childData;\n//         }\n//       })\n//     );\n\n//     setChildComments(childCommentsMap);\n//   }\n\n//   useEffect(() => {\n//     getComments();\n//   }, [postId]);\n\n//   function handleReply(commentId) {\n//     setReplyingTo(commentId);\n//     setNewComment('');\n//   }\n\n//   function handleCancelReply() {\n//     setReplyingTo(null);\n//   }\n\n//   async function handlePostReply(commentId) {\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\n\n//     await fetch('http://localhost:8080/addChildComment', {\n//       method: 'POST',\n//       body: new URLSearchParams({\n//         username: username,\n//         comment: newComment,\n//         parentId: commentId,\n//       }),\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     });\n\n//     // After posting, fetch the updated comments\n//     await getComments();\n\n//     setReplyingTo(null);\n//     setNewComment('');\n//   }\n\n//   return (\n//     <div className=\"commentsListClass\">\n//       <p>Posted comments:</p>\n//       {comments.map((comment) => (\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\n//           <div className=\"comment-content\">\n//             <p>\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n//             </p>\n//           </div>\n//           <div className=\"reply-button-container\">\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\n//               Reply <i className=\"fa fa-reply\"></i>\n//             </button>\n//           </div>\n//           {replyingTo === comment.c_id && (\n//             <div className=\"reply-input-container\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Type your reply...\"\n//                 value={newComment}\n//                 onChange={(e) => setNewComment(e.target.value)}\n//               />\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\n//                 Post Reply\n//               </button>\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\n//                 Cancel\n//               </button>\n//             </div>\n//           )}\n//           {childComments[comment.c_id] && childComments[comment.c_id].length > 0 && (\n//             <div className={`child-comments indent-${comment.indentLevel + 1}`}>\n//               {childComments[comment.c_id].map((childComment) => (\n//                 <div key={childComment.id} className={`comment-item indent-${childComment.indentLevel}`}>\n//                   <div className=\"comment-content\">\n//                     <p>\n//                       <span className=\"comment-username\">{childComment.createdBy}:</span> {childComment.comment}\n//                     </p>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default CommentList;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './CommentList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CommentList() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [replyingTo, setReplyingTo] = useState(null);\n  const [newComment, setNewComment] = useState('');\n  const {\n    username,\n    postId\n  } = useParams();\n  async function fetchComments() {\n    const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    });\n    const data = await response.json();\n    setComments(data);\n  }\n  async function fetchChildComments(commentId) {\n    const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    });\n    const data = await response.json();\n    return data;\n  }\n  useEffect(() => {\n    fetchComments();\n  }, [postId]);\n  async function handlePost(commentId) {\n    const endpoint = commentId ? 'addChildComment' : 'addComment';\n    await fetch(`http://localhost:8080/${endpoint}`, {\n      method: 'POST',\n      body: new URLSearchParams({\n        username: username,\n        comment: newComment,\n        parentId: commentId || '',\n        postId: postId\n      }),\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    });\n    await fetchComments();\n    setReplyingTo(null);\n    setNewComment('');\n  }\n  async function handleReply(commentId) {\n    setReplyingTo(commentId);\n    setNewComment('');\n  }\n  function handleCancelReply() {\n    setReplyingTo(null);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"commentsListClass\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Posted comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 7\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-username\",\n            children: [comment.createdBy, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this), \" \", comment.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reply-button\",\n          onClick: () => handleReply(comment.c_id),\n          children: [\"Reply \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 11\n      }, this), replyingTo === comment.c_id && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your reply...\",\n          value: newComment,\n          onChange: e => setNewComment(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-reply-button\",\n          onClick: () => handlePost(comment.c_id),\n          children: \"Post Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-reply-button\",\n          onClick: handleCancelReply,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 13\n      }, this), comment.numbe_of_child_comments > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"child-comments\",\n        children: fetchChildComments(comment.c_id).then(childComments => childComments.map(childComment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-item child-comment\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-content\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"comment-username\",\n                children: [childComment.createdBy, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 25\n              }, this), \" \", childComment.comment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 21\n          }, this)\n        }, childComment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 19\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 13\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-comment-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your comment...\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"post-comment-button\",\n        onClick: () => handlePost(''),\n        children: \"Post Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 617,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentList, \"Pmy44k0J1K/KYvpmHwLs2qWqRCA=\", false, function () {\n  return [useParams];\n});\n_c = CommentList;\nexport default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","CommentList","_s","comments","setComments","replyingTo","setReplyingTo","newComment","setNewComment","username","postId","fetchComments","response","fetch","method","headers","data","json","fetchChildComments","commentId","handlePost","endpoint","body","URLSearchParams","comment","parentId","handleReply","handleCancelReply","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","createdBy","onClick","c_id","type","placeholder","value","onChange","e","target","numbe_of_child_comments","then","childComments","childComment","id","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/CommentsList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import './CommentList.css';\r\n\r\n// function CommentList() {\r\n//   const [comments, setComments] = useState([]);\r\n//   const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\r\n//   const [newComment, setNewComment] = useState(''); // Track the content of the new comment\r\n//   const { username, postId } = useParams();\r\n\r\n//   function getComments() {\r\n//     fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then((response) => setComments(response))\r\n//       .catch((error) => console.error(error));\r\n//   }\r\n\r\n//  useEffect(() => {\r\n//   getComments();\r\n// }, []);\r\n\r\n// function fetchChildComments(commentId, indentLevel = 1) {\r\n//   fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n//     method: 'GET',\r\n//     headers: {\r\n//       'Content-type': 'application/x-www-form-urlencoded',\r\n//     },\r\n//   })\r\n//     .then((response) => response.json())\r\n//     .then((childComments) => {\r\n//       if (childComments.length > 0) {\r\n//         const childCommentsWithIndent = childComments.map((childComment) => ({\r\n//           ...childComment,\r\n//           indentLevel,\r\n//         }));\r\n//         setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\r\n\r\n//         // Recursively fetch and display child comments\r\n//         childComments.forEach((childComment) => {\r\n//           if (childComment.numbe_of_child_comments > 0) {\r\n//             fetchChildComments(childComment.id, indentLevel + 1);\r\n//           }\r\n//         });\r\n//       }\r\n//     })\r\n//     .catch((error) => console.error(error));\r\n// }\r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n//   function handleReply(commentId) {\r\n//     // Set the comment being replied to and clear the new comment input\r\n//     setReplyingTo(commentId);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   function handleCancelReply() {\r\n//     // Clear the comment being replied to\r\n//     setReplyingTo(null);\r\n//   }\r\n\r\n//   function handlePostReply(commentId) {\r\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n//     // Add the comment in the database\r\n//     fetch('http://localhost:8080/addChildComment', {\r\n//       method: 'POST',\r\n//       body: new URLSearchParams({\r\n//         username: username,\r\n//         comment: newComment,\r\n//         parentId: commentId\r\n//       }),\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       }\r\n//     }).then((response) => response)\r\n//     .then((data)=> console.log(data))\r\n//     .catch(error => console.log(error));\r\n\r\n//     // Clear the comment being replied to and reset the new comment input\r\n//     setReplyingTo(null);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"commentsListClass\">\r\n//       <p>Posted comments:</p>\r\n//       {comments.map((comment) => (\r\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n//           <div className=\"comment-content\">\r\n//             <p>\r\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"reply-button-container\">\r\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n//               Reply <i className=\"fa fa-reply\"></i>\r\n//             </button>\r\n//           </div>\r\n//           {comment.numbe_of_child_comments}\r\n//           {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\r\n//           {replyingTo === comment.c_id && (\r\n//             <div className=\"reply-input-container\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Type your reply...\"\r\n//                 value={newComment}\r\n//                 onChange={(e) => setNewComment(e.target.value)}\r\n//               />\r\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n//                 Post Reply\r\n//               </button>\r\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n//                 Cancel\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n\r\n// };\r\n\r\n// export default CommentList;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import './CommentList.css';\r\n\r\n// function CommentList() {\r\n//   const [comments, setComments] = useState([]);\r\n//   const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\r\n//   const [newComment, setNewComment] = useState(''); // Track the content of the new comment\r\n//   const { username, postId } = useParams();\r\n\r\n//   async function getComments() {\r\n//     const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     });\r\n\r\n//     const data = await response.json();\r\n//     setComments(data);\r\n//   }\r\n\r\n//   async function fetchChildComments(commentId, indentLevel = 1) {\r\n//     const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     });\r\n\r\n//     const childComments = await response.json();\r\n\r\n//     if (childComments.length > 0) {\r\n//       const childCommentsWithIndent = childComments.map((childComment) => ({\r\n//         ...childComment,\r\n//         indentLevel,\r\n//       }));\r\n\r\n//       // Recursively fetch and display child comments\r\n//       await Promise.all(\r\n//         childCommentsWithIndent.map(async (childComment) => {\r\n//           if (childComment.numbe_of_child_comments > 0) {\r\n//             await fetchChildComments(childComment.id, indentLevel + 1);\r\n//           }\r\n//         })\r\n//       );\r\n\r\n//       // Update the state with the new child comments\r\n//       setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\r\n//     }\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     getComments();\r\n//   }, []);\r\n\r\n//   function handleReply(commentId) {\r\n//     // Set the comment being replied to and clear the new comment input\r\n//     setReplyingTo(commentId);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   function handleCancelReply() {\r\n//     // Clear the comment being replied to\r\n//     setReplyingTo(null);\r\n//   }\r\n\r\n//   async function handlePostReply(commentId) {\r\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n//     // Add the comment in the database\r\n//     await fetch('http://localhost:8080/addChildComment', {\r\n//       method: 'POST',\r\n//       body: new URLSearchParams({\r\n//         username: username,\r\n//         comment: newComment,\r\n//         parentId: commentId,\r\n//       }),\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     });\r\n\r\n//     // get the comments\r\n//     await getComments();\r\n\r\n//     // Clear the comment being replied to and reset the new comment input\r\n//     setReplyingTo(null);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"commentsListClass\">\r\n//       <p>Posted comments:</p>\r\n//       {comments.map((comment) => (\r\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n//           <div className=\"comment-content\">\r\n//             <p>\r\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"reply-button-container\">\r\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n//               Reply <i className=\"fa fa-reply\"></i>\r\n//             </button>\r\n//           </div>\r\n//           {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\r\n//           {replyingTo === comment.c_id && (\r\n//             <div className=\"reply-input-container\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Type your reply...\"\r\n//                 value={newComment}\r\n//                 onChange={(e) => setNewComment(e.target.value)}\r\n//               />\r\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n//                 Post Reply\r\n//               </button>\r\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n//                 Cancel\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CommentList;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import './CommentList.css';\r\n\r\n// function CommentList() {\r\n//   const [comments, setComments] = useState([]);\r\n//   const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\r\n//   const [newComment, setNewComment] = useState(''); // Track the content of the new comment\r\n//   const { username, postId } = useParams();\r\n\r\n//   async function getComments() {\r\n//     const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     });\r\n\r\n//     const data = await response.json();\r\n//     setComments(data);\r\n\r\n//     // Fetch child comments when the component mounts\r\n//     if (data.length > 0) {\r\n//       data.forEach((comment) => {\r\n//         if (comment.numbe_of_child_comments > 0) {\r\n//           fetchChildComments(comment.c_id, comment.indentLevel);\r\n//         }\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   async function fetchChildComments(commentId, indentLevel = 1) {\r\n//     const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     });\r\n\r\n//     const childComments = await response.json();\r\n\r\n//     if (childComments.length > 0) {\r\n//       const childCommentsWithIndent = childComments.map((childComment) => ({\r\n//         ...childComment,\r\n//         indentLevel,\r\n//       }));\r\n\r\n//       // Recursively fetch and display child comments\r\n//       await Promise.all(\r\n//         childCommentsWithIndent.map(async (childComment) => {\r\n//           if (childComment.numbe_of_child_comments > 0) {\r\n//             await fetchChildComments(childComment.id, indentLevel + 1);\r\n//           }\r\n//         })\r\n//       );\r\n\r\n//       // Update the state with the new child comments\r\n//       setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\r\n//     }\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     getComments();\r\n//   }, []);\r\n\r\n//   function handleReply(commentId) {\r\n//     // Set the comment being replied to and clear the new comment input\r\n//     setReplyingTo(commentId);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   function handleCancelReply() {\r\n//     // Clear the comment being replied to\r\n//     setReplyingTo(null);\r\n//   }\r\n\r\n//   async function handlePostReply(commentId) {\r\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n//     // Add the comment in the database\r\n//     await fetch('http://localhost:8080/addChildComment', {\r\n//       method: 'POST',\r\n//       body: new URLSearchParams({\r\n//         username: username,\r\n//         comment: newComment,\r\n//         parentId: commentId,\r\n//       }),\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     });\r\n\r\n//     // get the comments\r\n//     await getComments();\r\n\r\n//     // Clear the comment being replied to and reset the new comment input\r\n//     setReplyingTo(null);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"commentsListClass\">\r\n//       <p>Posted comments:</p>\r\n//       {comments.map((comment) => (\r\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n//           <div className=\"comment-content\">\r\n//             <p>\r\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"reply-button-container\">\r\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n//               Reply <i className=\"fa fa-reply\"></i>\r\n//             </button>\r\n//           </div>\r\n//           {comment.numbe_of_child_comments > 0 && (\r\n//             <div className={`child-comments indent-${comment.indentLevel + 1}`}>\r\n//               {comments\r\n//                 .filter((childComment) => childComment.parentId === comment.c_id)\r\n//                 .map((childComment) => (\r\n//                   <div key={childComment.id} className={`comment-item indent-${childComment.indentLevel}`}>\r\n//                     <div className=\"comment-content\">\r\n//                       <p>\r\n//                         <span className=\"comment-username\">{childComment.createdBy}:</span> {childComment.comment}\r\n//                       </p>\r\n//                     </div>\r\n//                   </div>\r\n//                 ))}\r\n//             </div>\r\n//           )}\r\n//           {replyingTo === comment.c_id && (\r\n//             <div className=\"reply-input-container\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Type your reply...\"\r\n//                 value={newComment}\r\n//                 onChange={(e) => setNewComment(e.target.value)}\r\n//               />\r\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n//                 Post Reply\r\n//               </button>\r\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n//                 Cancel\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CommentList;\r\n\r\n\r\n// function CommentList() {\r\n//   const [comments, setComments] = useState([]);\r\n//   const [childComments, setChildComments] = useState({});\r\n//   const [replyingTo, setReplyingTo] = useState(null);\r\n//   const [newComment, setNewComment] = useState('');\r\n//   const { username, postId } = useParams();\r\n\r\n//   async function getComments() {\r\n//     const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     });\r\n\r\n//     const data = await response.json();\r\n//     setComments(data);\r\n\r\n//     // Fetch child comments for each parent comment\r\n//     const childCommentsMap = {};\r\n//     await Promise.all(\r\n//       data.map(async (comment) => {\r\n//         if (comment.numbe_of_child_comments > 0) {\r\n//           const childResponse = await fetch(`http://localhost:8080/getChildComments?parentId=${comment.c_id}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//               'Content-type': 'application/x-www-form-urlencoded',\r\n//             },\r\n//           });\r\n\r\n//           const childData = await childResponse.json();\r\n//           childCommentsMap[comment.c_id] = childData;\r\n//         }\r\n//       })\r\n//     );\r\n\r\n//     setChildComments(childCommentsMap);\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     getComments();\r\n//   }, [postId]);\r\n\r\n//   function handleReply(commentId) {\r\n//     setReplyingTo(commentId);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   function handleCancelReply() {\r\n//     setReplyingTo(null);\r\n//   }\r\n\r\n//   async function handlePostReply(commentId) {\r\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n//     await fetch('http://localhost:8080/addChildComment', {\r\n//       method: 'POST',\r\n//       body: new URLSearchParams({\r\n//         username: username,\r\n//         comment: newComment,\r\n//         parentId: commentId,\r\n//       }),\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     });\r\n\r\n//     // After posting, fetch the updated comments\r\n//     await getComments();\r\n\r\n//     setReplyingTo(null);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"commentsListClass\">\r\n//       <p>Posted comments:</p>\r\n//       {comments.map((comment) => (\r\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n//           <div className=\"comment-content\">\r\n//             <p>\r\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"reply-button-container\">\r\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n//               Reply <i className=\"fa fa-reply\"></i>\r\n//             </button>\r\n//           </div>\r\n//           {replyingTo === comment.c_id && (\r\n//             <div className=\"reply-input-container\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Type your reply...\"\r\n//                 value={newComment}\r\n//                 onChange={(e) => setNewComment(e.target.value)}\r\n//               />\r\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n//                 Post Reply\r\n//               </button>\r\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n//                 Cancel\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//           {childComments[comment.c_id] && childComments[comment.c_id].length > 0 && (\r\n//             <div className={`child-comments indent-${comment.indentLevel + 1}`}>\r\n//               {childComments[comment.c_id].map((childComment) => (\r\n//                 <div key={childComment.id} className={`comment-item indent-${childComment.indentLevel}`}>\r\n//                   <div className=\"comment-content\">\r\n//                     <p>\r\n//                       <span className=\"comment-username\">{childComment.createdBy}:</span> {childComment.comment}\r\n//                     </p>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CommentList;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './CommentList.css';\r\n\r\nfunction CommentList() {\r\n  const [comments, setComments] = useState([]);\r\n  const [replyingTo, setReplyingTo] = useState(null);\r\n  const [newComment, setNewComment] = useState('');\r\n  const { username, postId } = useParams();\r\n\r\n  async function fetchComments() {\r\n    const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n    });\r\n    const data = await response.json();\r\n    setComments(data);\r\n  }\r\n\r\n  async function fetchChildComments(commentId) {\r\n    const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n    });\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [postId]);\r\n\r\n  async function handlePost(commentId) {\r\n    const endpoint = commentId ? 'addChildComment' : 'addComment';\r\n\r\n    await fetch(`http://localhost:8080/${endpoint}`, {\r\n      method: 'POST',\r\n      body: new URLSearchParams({\r\n        username: username,\r\n        comment: newComment,\r\n        parentId: commentId || '',\r\n        postId: postId,\r\n      }),\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n    });\r\n\r\n    await fetchComments();\r\n    setReplyingTo(null);\r\n    setNewComment('');\r\n  }\r\n\r\n  async function handleReply(commentId) {\r\n    setReplyingTo(commentId);\r\n    setNewComment('');\r\n  }\r\n\r\n  function handleCancelReply() {\r\n    setReplyingTo(null);\r\n  }\r\n\r\n  return (\r\n    <div className=\"commentsListClass\">\r\n      <p>Posted comments:</p>\r\n      {comments.map((comment) => (\r\n        <div key={comment.id} className=\"comment-item\">\r\n          <div className=\"comment-content\">\r\n            <p>\r\n              <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n            </p>\r\n          </div>\r\n          <div className=\"reply-button-container\">\r\n            <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n              Reply <i className=\"fa fa-reply\"></i>\r\n            </button>\r\n          </div>\r\n          {replyingTo === comment.c_id && (\r\n            <div className=\"reply-input-container\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type your reply...\"\r\n                value={newComment}\r\n                onChange={(e) => setNewComment(e.target.value)}\r\n              />\r\n              <button className=\"post-reply-button\" onClick={() => handlePost(comment.c_id)}>\r\n                Post Reply\r\n              </button>\r\n              <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          )}\r\n          {comment.numbe_of_child_comments > 0 && (\r\n            <div className=\"child-comments\">\r\n              {fetchChildComments(comment.c_id).then((childComments) =>\r\n                childComments.map((childComment) => (\r\n                  <div key={childComment.id} className=\"comment-item child-comment\">\r\n                    <div className=\"comment-content\">\r\n                      <p>\r\n                        <span className=\"comment-username\">{childComment.createdBy}:</span> {childComment.comment}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n      <div className=\"new-comment-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your comment...\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n        />\r\n        <button className=\"post-comment-button\" onClick={() => handlePost('')}>\r\n          Post Comment\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommentList;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}