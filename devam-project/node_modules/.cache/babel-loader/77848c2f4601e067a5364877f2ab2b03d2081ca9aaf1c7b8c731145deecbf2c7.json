{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\CommentsList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './CommentList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CommentList() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\n  const [newComment, setNewComment] = useState(''); // Track the content of the new comment\n  const {\n    username,\n    postId\n  } = useParams();\n\n  // useEffect(() => {\n  //   // Fetch comments initially\n  //   getComments();\n  // },[]);\n\n  function getComments() {\n    fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response.json()).then(response => setComments(response)).catch(error => console.error(error));\n  }\n\n  // function fetchChildComments(commentId, indentLevel = 1) {\n  //   fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-type': 'application/x-www-form-urlencoded',\n  //     },\n  //   })\n  //     .then((response) => response.json())\n  //     .then((childComments) => {\n  //       // Recursively fetch and display child comments\n  //       childComments.forEach((childComment) => {\n  //         fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\n  //       });\n  //       setComments([...comments, { ...childComments[0], indentLevel }]);\n  //     })\n  //     .catch((error) => console.error(error));\n  // }\n\n  async function fetchChildComments(commentId, indentLevel = 1) {\n    try {\n      const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const childComments = await response.json();\n      if (childComments.length > 0) {\n        // Recursively fetch and display child comments\n        for (const childComment of childComments) {\n          await fetchChildComments(childComment.id, indentLevel + 1);\n        }\n        const childCommentsWithIndent = childComments.map(childComment => ({\n          ...childComment,\n          indentLevel\n        }));\n        setComments(prevComments => [...prevComments, ...childCommentsWithIndent]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  useEffect(() => {\n    getComments();\n\n    // Fetch child comments when the component mounts\n    if (comments.length > 0) {\n      comments.forEach(comment => {\n        if (comment.numbe_of_child_comments > 0) {\n          fetchChildComments(comment.c_id, comment.indentLevel);\n        }\n      });\n    }\n  }, [comments]); // Run this effect whenever comments change\n\n  function handleReply(commentId) {\n    // Set the comment being replied to and clear the new comment input\n    setReplyingTo(commentId);\n    setNewComment('');\n  }\n  function handleCancelReply() {\n    // Clear the comment being replied to\n    setReplyingTo(null);\n  }\n  function handlePostReply(commentId) {\n    console.log(`Post reply to comment ${commentId}: ${newComment}`);\n\n    // Add the comment in the database\n    fetch('http://localhost:8080/addChildComment', {\n      method: 'POST',\n      body: new URLSearchParams({\n        username: username,\n        comment: newComment,\n        parentId: commentId\n      }),\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response).then(data => console.log(data)).catch(error => console.log(error));\n\n    // Clear the comment being replied to and reset the new comment input\n    setReplyingTo(null);\n    setNewComment('');\n  }\n\n  //   // return (\n  //   //   <div className=\"commentsListClass\">\n  //   //     <p>Posted comments:</p>\n  //   //     {comments.map((comment) => (\n  //   //       <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\n  //   //         <div className=\"comment-content\">\n  //   //           <p>\n  //   //             <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n  //   //           </p>\n  //   //         </div>\n  //   //         <div className=\"reply-button-container\">\n  //   //           <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\n  //   //             Reply <i className=\"fa fa-reply\"></i>\n  //   //           </button>\n  //   //         </div>\n  //   //         {comment.numbe_of_child_comments}\n  //   //         {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\n  //   //         {replyingTo === comment.c_id && (\n  //   //           <div className=\"reply-input-container\">\n  //   //             <input\n  //   //               type=\"text\"\n  //   //               placeholder=\"Type your reply...\"\n  //   //               value={newComment}\n  //   //               onChange={(e) => setNewComment(e.target.value)}\n  //   //             />\n  //   //             <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\n  //   //               Post Reply\n  //   //             </button>\n  //   //             <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\n  //   //               Cancel\n  //   //             </button>\n  //   //           </div>\n  //   //         )}\n  //   //       </div>\n  //   //     ))}\n  //   //   </div>\n  //   // );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"commentsListClass\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Posted comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `comment-item indent-${comment.indentLevel}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-username\",\n            children: [comment.createdBy, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this), \" \", comment.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reply-button\",\n          onClick: () => handleReply(comment.c_id),\n          children: [\"Reply \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), comment.numbe_of_child_comments > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"child-comments-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this), replyingTo === comment.c_id && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your reply...\",\n          value: newComment,\n          onChange: e => setNewComment(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-reply-button\",\n          onClick: () => handlePostReply(comment.c_id),\n          children: \"Post Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-reply-button\",\n          onClick: handleCancelReply,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentList, \"Pmy44k0J1K/KYvpmHwLs2qWqRCA=\", false, function () {\n  return [useParams];\n});\n_c = CommentList;\n;\nexport default CommentList;\n\n// function CommentList() {\n//   const [comments, setComments] = useState([]);\n//   const [newComment, setNewComment] = useState('');\n//   const { username, postId } = useParams();\n\n//   async function fetchComments() {\n//     try {\n//       const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n//         method: 'GET',\n//         headers: {\n//           'Content-type': 'application/x-www-form-urlencoded',\n//         },\n//       });\n//       const data = await response.json();\n//       setComments(data);\n//     } catch (error) {\n//       console.error('Error fetching comments:', error);\n//     }\n//   }\n\n//   async function fetchChildComments(commentId, indentLevel = 1) {\n//     try {\n//       const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n//         method: 'GET',\n//         headers: {\n//           'Content-type': 'application/x-www-form-urlencoded',\n//         },\n//       });\n//       const childComments = await response.json();\n\n//       if (childComments.length > 0) {\n//         for (const childComment of childComments) {\n//           await fetchChildComments(childComment.id, indentLevel + 1);\n//         }\n\n//         const childCommentsWithIndent = childComments.map((childComment) => ({\n//           ...childComment,\n//           indentLevel,\n//         }));\n\n//         setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching child comments:', error);\n//     }\n//   }\n\n//   useEffect(() => {\n//     fetchComments();\n//   }, [postId]);\n\n//   function handleReply(commentId) {\n//     setComments((prevComments) => prevComments.map((comment) => ({ ...comment, replying: comment.c_id === commentId })));\n//     setNewComment('');\n//   }\n\n//   async function handlePostReply(commentId) {\n//     try {\n//       console.log(`Post reply to comment ${commentId}: ${newComment}`);\n\n//       // Add the comment in the database\n//       await fetch('http://localhost:8080/addChildComment', {\n//         method: 'POST',\n//         body: new URLSearchParams({\n//           username: username,\n//           comment: newComment,\n//           parentId: commentId,\n//         }),\n//         headers: {\n//           'Content-type': 'application/x-www-form-urlencoded',\n//         },\n//       });\n\n//       // Refresh comments after posting a reply\n//       await fetchComments();\n\n//       // Fetch child comments for the comment that was just replied to\n//       const repliedComment = comments.find((comment) => comment.c_id === commentId);\n//       if (repliedComment.numbe_of_child_comments > 0) {\n//         await fetchChildComments(commentId, repliedComment.indentLevel);\n//       }\n//     } catch (error) {\n//       console.error('Error posting reply:', error);\n//     }\n//   }\n\n//   return (\n//     <div className=\"commentsListClass\">\n//       <p>Posted comments:</p>\n//       {comments.map((comment) => (\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\n//           <div className=\"comment-content\">\n//             <p>\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n//             </p>\n//           </div>\n//           <div className=\"reply-button-container\">\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\n//               Reply <i className=\"fa fa-reply\"></i>\n//             </button>\n//           </div>\n//           {comment.numbe_of_child_comments > 0 && (\n//             <div className={`child-comments-container indent-${comment.indentLevel + 1}`}>\n//               {comments\n//                 .filter((childComment) => childComment.parentId === comment.c_id)\n//                 .map((childComment) => (\n//                   <div key={childComment.id} className={`comment-item indent-${childComment.indentLevel}`}>\n//                     <div className=\"comment-content\">\n//                       <p>\n//                         <span className=\"comment-username\">{childComment.createdBy}:</span> {childComment.comment}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 ))}\n//             </div>\n//           )}\n//           {comment.replying && (\n//             <div className=\"reply-input-container\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Type your reply...\"\n//                 value={newComment}\n//                 onChange={(e) => setNewComment(e.target.value)}\n//               />\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\n//                 Post Reply\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","CommentList","_s","comments","setComments","replyingTo","setReplyingTo","newComment","setNewComment","username","postId","getComments","fetch","method","headers","then","response","json","catch","error","console","fetchChildComments","commentId","indentLevel","childComments","length","childComment","id","childCommentsWithIndent","map","prevComments","forEach","comment","numbe_of_child_comments","c_id","handleReply","handleCancelReply","handlePostReply","log","body","URLSearchParams","parentId","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","createdBy","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/CommentsList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './CommentList.css';\r\n\r\nfunction CommentList() {\r\n  const [comments, setComments] = useState([]);\r\n  const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\r\n  const [newComment, setNewComment] = useState(''); // Track the content of the new comment\r\n  const { username, postId } = useParams();\r\n\r\n  // useEffect(() => {\r\n  //   // Fetch comments initially\r\n  //   getComments();\r\n  // },[]);\r\n\r\n  function getComments() {\r\n    fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => setComments(response))\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  // function fetchChildComments(commentId, indentLevel = 1) {\r\n  //   fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n  //     method: 'GET',\r\n  //     headers: {\r\n  //       'Content-type': 'application/x-www-form-urlencoded',\r\n  //     },\r\n  //   })\r\n  //     .then((response) => response.json())\r\n  //     .then((childComments) => {\r\n  //       // Recursively fetch and display child comments\r\n  //       childComments.forEach((childComment) => {\r\n  //         fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\r\n  //       });\r\n  //       setComments([...comments, { ...childComments[0], indentLevel }]);\r\n  //     })\r\n  //     .catch((error) => console.error(error));\r\n  // }\r\n\r\n  async function fetchChildComments(commentId, indentLevel = 1) {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-type': 'application/x-www-form-urlencoded',\r\n        },\r\n      });\r\n\r\n      const childComments = await response.json();\r\n\r\n      if (childComments.length > 0) {\r\n        // Recursively fetch and display child comments\r\n        for (const childComment of childComments) {\r\n          await fetchChildComments(childComment.id, indentLevel + 1);\r\n        }\r\n\r\n        const childCommentsWithIndent = childComments.map((childComment) => ({\r\n          ...childComment,\r\n          indentLevel,\r\n        }));\r\n\r\n        setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getComments();\r\n\r\n    // Fetch child comments when the component mounts\r\n    if (comments.length > 0) {\r\n      comments.forEach((comment) => {\r\n        if (comment.numbe_of_child_comments > 0) {\r\n          fetchChildComments(comment.c_id, comment.indentLevel);\r\n        }\r\n      });\r\n    }\r\n  }, [comments]); // Run this effect whenever comments change\r\n\r\n  \r\n  \r\n  \r\n\r\n  function handleReply(commentId) {\r\n    // Set the comment being replied to and clear the new comment input\r\n    setReplyingTo(commentId);\r\n    setNewComment('');\r\n  }\r\n\r\n  function handleCancelReply() {\r\n    // Clear the comment being replied to\r\n    setReplyingTo(null);\r\n  }\r\n\r\n  function handlePostReply(commentId) {\r\n    console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n    // Add the comment in the database\r\n    fetch('http://localhost:8080/addChildComment', {\r\n      method: 'POST',\r\n      body: new URLSearchParams({\r\n        username: username,\r\n        comment: newComment,\r\n        parentId: commentId\r\n      }),\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      }\r\n    }).then((response) => response)\r\n    .then((data)=> console.log(data))\r\n    .catch(error => console.log(error));\r\n\r\n    // Clear the comment being replied to and reset the new comment input\r\n    setReplyingTo(null);\r\n    setNewComment('');\r\n  }\r\n\r\n//   // return (\r\n//   //   <div className=\"commentsListClass\">\r\n//   //     <p>Posted comments:</p>\r\n//   //     {comments.map((comment) => (\r\n//   //       <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n//   //         <div className=\"comment-content\">\r\n//   //           <p>\r\n//   //             <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n//   //           </p>\r\n//   //         </div>\r\n//   //         <div className=\"reply-button-container\">\r\n//   //           <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n//   //             Reply <i className=\"fa fa-reply\"></i>\r\n//   //           </button>\r\n//   //         </div>\r\n//   //         {comment.numbe_of_child_comments}\r\n//   //         {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\r\n//   //         {replyingTo === comment.c_id && (\r\n//   //           <div className=\"reply-input-container\">\r\n//   //             <input\r\n//   //               type=\"text\"\r\n//   //               placeholder=\"Type your reply...\"\r\n//   //               value={newComment}\r\n//   //               onChange={(e) => setNewComment(e.target.value)}\r\n//   //             />\r\n//   //             <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n//   //               Post Reply\r\n//   //             </button>\r\n//   //             <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n//   //               Cancel\r\n//   //             </button>\r\n//   //           </div>\r\n//   //         )}\r\n//   //       </div>\r\n//   //     ))}\r\n//   //   </div>\r\n//   // );\r\n\r\n\r\n  return (\r\n    <div className=\"commentsListClass\">\r\n      <p>Posted comments:</p>\r\n      {comments.map((comment) => (\r\n        <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n          <div className=\"comment-content\">\r\n            <p>\r\n              <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n            </p>\r\n          </div>\r\n          <div className=\"reply-button-container\">\r\n            <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n              Reply <i className=\"fa fa-reply\"></i>\r\n            </button>\r\n          </div>\r\n          {comment.numbe_of_child_comments > 0 && (\r\n            <div className=\"child-comments-container\">\r\n              {/* Render child comments here */}\r\n              {/* You can use a separate mapping or recursion */}\r\n            </div>\r\n          )}\r\n          {replyingTo === comment.c_id && (\r\n            <div className=\"reply-input-container\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type your reply...\"\r\n                value={newComment}\r\n                onChange={(e) => setNewComment(e.target.value)}\r\n              />\r\n              <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n                Post Reply\r\n              </button>\r\n              <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentList;\r\n\r\n\r\n\r\n\r\n\r\n// function CommentList() {\r\n//   const [comments, setComments] = useState([]);\r\n//   const [newComment, setNewComment] = useState('');\r\n//   const { username, postId } = useParams();\r\n\r\n//   async function fetchComments() {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-type': 'application/x-www-form-urlencoded',\r\n//         },\r\n//       });\r\n//       const data = await response.json();\r\n//       setComments(data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching comments:', error);\r\n//     }\r\n//   }\r\n\r\n//   async function fetchChildComments(commentId, indentLevel = 1) {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-type': 'application/x-www-form-urlencoded',\r\n//         },\r\n//       });\r\n//       const childComments = await response.json();\r\n\r\n//       if (childComments.length > 0) {\r\n//         for (const childComment of childComments) {\r\n//           await fetchChildComments(childComment.id, indentLevel + 1);\r\n//         }\r\n\r\n//         const childCommentsWithIndent = childComments.map((childComment) => ({\r\n//           ...childComment,\r\n//           indentLevel,\r\n//         }));\r\n\r\n//         setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error fetching child comments:', error);\r\n//     }\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     fetchComments();\r\n//   }, [postId]);\r\n\r\n//   function handleReply(commentId) {\r\n//     setComments((prevComments) => prevComments.map((comment) => ({ ...comment, replying: comment.c_id === commentId })));\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   async function handlePostReply(commentId) {\r\n//     try {\r\n//       console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n//       // Add the comment in the database\r\n//       await fetch('http://localhost:8080/addChildComment', {\r\n//         method: 'POST',\r\n//         body: new URLSearchParams({\r\n//           username: username,\r\n//           comment: newComment,\r\n//           parentId: commentId,\r\n//         }),\r\n//         headers: {\r\n//           'Content-type': 'application/x-www-form-urlencoded',\r\n//         },\r\n//       });\r\n\r\n//       // Refresh comments after posting a reply\r\n//       await fetchComments();\r\n\r\n//       // Fetch child comments for the comment that was just replied to\r\n//       const repliedComment = comments.find((comment) => comment.c_id === commentId);\r\n//       if (repliedComment.numbe_of_child_comments > 0) {\r\n//         await fetchChildComments(commentId, repliedComment.indentLevel);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error posting reply:', error);\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"commentsListClass\">\r\n//       <p>Posted comments:</p>\r\n//       {comments.map((comment) => (\r\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n//           <div className=\"comment-content\">\r\n//             <p>\r\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"reply-button-container\">\r\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n//               Reply <i className=\"fa fa-reply\"></i>\r\n//             </button>\r\n//           </div>\r\n//           {comment.numbe_of_child_comments > 0 && (\r\n//             <div className={`child-comments-container indent-${comment.indentLevel + 1}`}>\r\n//               {comments\r\n//                 .filter((childComment) => childComment.parentId === comment.c_id)\r\n//                 .map((childComment) => (\r\n//                   <div key={childComment.id} className={`comment-item indent-${childComment.indentLevel}`}>\r\n//                     <div className=\"comment-content\">\r\n//                       <p>\r\n//                         <span className=\"comment-username\">{childComment.createdBy}:</span> {childComment.comment}\r\n//                       </p>\r\n//                     </div>\r\n//                   </div>\r\n//                 ))}\r\n//             </div>\r\n//           )}\r\n//           {comment.replying && (\r\n//             <div className=\"reply-input-container\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Type your reply...\"\r\n//                 value={newComment}\r\n//                 onChange={(e) => setNewComment(e.target.value)}\r\n//               />\r\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n//                 Post Reply\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CommentList;\r\n"],"mappings":"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QAIWH,SAAS;AAAA;AAAA2D,EAAA,GAJ/BxD,WAAW;AAyMnB;AAED,eAAeA,WAAW;;AAM1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}