{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\Search.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './Search.css';\n\n// const Search = () => {\n//   const [searchType, setSearchType] = useState('content');\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [isSearching, setIsSearching] = useState(false);\n\n//   useEffect(() => {\n//     // This effect will run whenever isSearching changes\n//     console.log('isSearching changed:', isSearching);\n\n//     // You can add additional logic or API calls here based on isSearching\n//   }, [isSearching]);\n\n//   function handleSearchTypeChange(type) {\n//     setSearchType(type);\n//   }\n\n//   function handleSearch() {\n//     setIsSearching((prevIsSearching) => !prevIsSearching);\n//   }\n\n//   return (\n//     <>\n//       <div className=\"search-container\">\n//         <input\n//           type=\"text\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//           placeholder={`Search ${searchType === 'content' ? 'Content' : 'User'}`}\n//         />\n//         <button onClick={handleSearch}>Search</button>\n//       </div>\n//       {isSearching && (\n//         <div className=\"search-options\">\n//           <label>\n//             <input\n//               type=\"radio\"\n//               value=\"content\"\n//               checked={searchType === 'content'}\n//               onChange={() => handleSearchTypeChange('content')}\n//             />\n//             Content\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               value=\"user\"\n//               checked={searchType === 'user'}\n//               onChange={() => handleSearchTypeChange('user')}\n//             />\n//             User\n//           </label>\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Search;\n\nimport React, { useState, useEffect } from 'react';\nimport './Search.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Search = () => {\n  _s();\n  const [searchType, setSearchType] = useState('content');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isSearching, setIsSearching] = useState(false);\n  useEffect(() => {\n    // This effect will run whenever isSearching changes\n    console.log('isSearching changed:', isSearching);\n\n    // You can add additional logic or API calls here based on isSearching\n  }, [isSearching]);\n  function handleSearchTypeChange(type) {\n    setSearchType(type);\n  }\n  function handleSearch() {}\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value),\n        placeholder: `Search ${searchType === 'content' ? 'Content' : 'User'}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"content\",\n          checked: searchType === 'content',\n          onChange: () => handleSearchTypeChange('content')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), \"Content\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"user\",\n          checked: searchType === 'user',\n          onChange: () => handleSearchTypeChange('user')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), \"User\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Search, \"nmFB0E/LPrTri+vNWNuD3TsUHHw=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Search","_s","searchType","setSearchType","searchTerm","setSearchTerm","isSearching","setIsSearching","console","log","handleSearchTypeChange","type","handleSearch","children","className","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","checked","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/Search.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './Search.css';\r\n\r\n// const Search = () => {\r\n//   const [searchType, setSearchType] = useState('content');\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [isSearching, setIsSearching] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     // This effect will run whenever isSearching changes\r\n//     console.log('isSearching changed:', isSearching);\r\n\r\n//     // You can add additional logic or API calls here based on isSearching\r\n//   }, [isSearching]);\r\n\r\n//   function handleSearchTypeChange(type) {\r\n//     setSearchType(type);\r\n//   }\r\n\r\n//   function handleSearch() {\r\n//     setIsSearching((prevIsSearching) => !prevIsSearching);\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"search-container\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//           placeholder={`Search ${searchType === 'content' ? 'Content' : 'User'}`}\r\n//         />\r\n//         <button onClick={handleSearch}>Search</button>\r\n//       </div>\r\n//       {isSearching && (\r\n//         <div className=\"search-options\">\r\n//           <label>\r\n//             <input\r\n//               type=\"radio\"\r\n//               value=\"content\"\r\n//               checked={searchType === 'content'}\r\n//               onChange={() => handleSearchTypeChange('content')}\r\n//             />\r\n//             Content\r\n//           </label>\r\n//           <label>\r\n//             <input\r\n//               type=\"radio\"\r\n//               value=\"user\"\r\n//               checked={searchType === 'user'}\r\n//               onChange={() => handleSearchTypeChange('user')}\r\n//             />\r\n//             User\r\n//           </label>\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Search;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Search.css';\r\n\r\nconst Search = () => {\r\n  const [searchType, setSearchType] = useState('content');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isSearching, setIsSearching] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // This effect will run whenever isSearching changes\r\n    console.log('isSearching changed:', isSearching);\r\n\r\n    // You can add additional logic or API calls here based on isSearching\r\n  }, [isSearching]);\r\n\r\n  function handleSearchTypeChange(type) {\r\n    setSearchType(type);\r\n  }\r\n\r\n  function handleSearch() {\r\n    \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"search-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          placeholder={`Search ${searchType === 'content' ? 'Content' : 'User'}`}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n        <div className=\"search-options\">\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"content\"\r\n              checked={searchType === 'content'}\r\n              onChange={() => handleSearchTypeChange('content')}\r\n            />\r\n            Content\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"user\"\r\n              checked={searchType === 'user'}\r\n              onChange={() => handleSearchTypeChange('user')}\r\n            />\r\n            User\r\n          </label>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}