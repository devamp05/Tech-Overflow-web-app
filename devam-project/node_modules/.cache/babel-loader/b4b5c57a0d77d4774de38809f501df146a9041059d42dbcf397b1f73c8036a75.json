{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Link, useNavigate } from 'react-router-dom';\n// import './Login.css';\n\n// const Login = () => {\n//   const [username, setUsername] = useState('');\n//   const [password, setPassword] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleLogin = async () => {\n//     // Make a POST request to your server endpoint (/getUser)\n//     const response = await fetch('http://localhost:8080/getUser', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/x-www-form-urlencoded',\n//       },\n//       body: new URLSearchParams({\n//         username: username,\n//         password: password,\n//       }),\n//     });\n\n//     const data = await response.json();\n//     if (response.ok) {\n//       // Successful login\n//       // Redirect to the Channels component or perform any other actions\n//       navigate('/getChannels');\n//       alert('Login successful');\n//     } else {\n//       // Failed login\n//       alert(\"try again!\");\n//       setUsername(\"\");\n//       setPassword(\"\");\n//     }\n\n//     // console.log(result); // Assuming your server sends a user ID or error message\n\n//     // Handle the response accordingly, e.g., redirect to a dashboard or show an error.\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <form>\n//         <label>\n//           Username:\n//           <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} />\n//         </label>\n//         <br />\n//         <label>\n//           Password:\n//           <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n//         </label>\n//         <br />\n//         <button type=\"button\" onClick={handleLogin}>\n//           Login\n//         </button>\n//         <div className=\"link\">\n//           New to somename? <Link to=\"/signup\">Create an account</Link>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Login;\n\n// Login.js\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login({\n  setAuthenticated\n}) {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = async () => {\n    const response = await fetch('http://localhost:8080/getUser', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        username: username,\n        password: password\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      // Successful login\n      setAuthenticated, (err, res) => {\n        if (err) console.log(err);\n      };\n      navigate('/getChannels');\n      alert('Login successful');\n    } else {\n      // Failed login\n      alert('Invalid username or password. Please try again.');\n      setUsername('');\n      setPassword('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"link\",\n        children: [\"New to somename? \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/signup\",\n          children: \"Create an account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"IIPwWddbiEHHD7aoL5eQeOR7fTk=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\n;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Link","useNavigate","jsxDEV","_jsxDEV","Login","setAuthenticated","_s","username","setUsername","password","setPassword","navigate","handleLogin","response","fetch","method","headers","body","URLSearchParams","data","json","ok","err","res","console","log","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","className","to","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/Login.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Link, useNavigate } from 'react-router-dom';\r\n// import './Login.css';\r\n\r\n// const Login = () => {\r\n//   const [username, setUsername] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleLogin = async () => {\r\n//     // Make a POST request to your server endpoint (/getUser)\r\n//     const response = await fetch('http://localhost:8080/getUser', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//       body: new URLSearchParams({\r\n//         username: username,\r\n//         password: password,\r\n//       }),\r\n//     });\r\n\r\n//     const data = await response.json();\r\n//     if (response.ok) {\r\n//       // Successful login\r\n//       // Redirect to the Channels component or perform any other actions\r\n//       navigate('/getChannels');\r\n//       alert('Login successful');\r\n//     } else {\r\n//       // Failed login\r\n//       alert(\"try again!\");\r\n//       setUsername(\"\");\r\n//       setPassword(\"\");\r\n//     }\r\n\r\n//     // console.log(result); // Assuming your server sends a user ID or error message\r\n\r\n//     // Handle the response accordingly, e.g., redirect to a dashboard or show an error.\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Login</h2>\r\n//       <form>\r\n//         <label>\r\n//           Username:\r\n//           <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Password:\r\n//           <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <button type=\"button\" onClick={handleLogin}>\r\n//           Login\r\n//         </button>\r\n//         <div className=\"link\">\r\n//           New to somename? <Link to=\"/signup\">Create an account</Link>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\n\r\n// Login.js\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nfunction Login ({ setAuthenticated }) \r\n{\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async () => {\r\n    const response = await fetch('http://localhost:8080/getUser', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: new URLSearchParams({\r\n        username: username,\r\n        password: password,\r\n      }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      // Successful login\r\n      setAuthenticated,(err, res)=>\r\n      {\r\n        if (err) console.log(err);\r\n      };\r\n      navigate('/getChannels');\r\n      alert('Login successful');\r\n    } else {\r\n      // Failed login\r\n      alert('Invalid username or password. Please try again.');\r\n      setUsername('');\r\n      setPassword('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n      <form>\r\n        <label>\r\n          Username:\r\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Password:\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"button\" onClick={handleLogin}>\r\n          Login\r\n        </button>\r\n        <div className=\"link\">\r\n          New to somename? <Link to=\"/signup\">Create an account</Link>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}