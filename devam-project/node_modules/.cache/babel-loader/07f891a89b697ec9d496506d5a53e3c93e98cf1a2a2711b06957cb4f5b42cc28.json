{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\Search.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Search.css';\nimport { useNavigate } from 'react-router-dom';\nimport SearchResultPostList from './SearchResultPostList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = ({\n  username\n}) => {\n  _s();\n  const [searchType, setSearchType] = useState('content');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showSearchOptions, setShowSearchOptions] = useState(false);\n  const navigate = useNavigate();\n  function handleSearchTypeChange(type) {\n    if (type === 'user') {\n      // Alert the user for the key words that they can search for\n      alert(\"keywords: mostPopularUser, minPopularUser, mostCBUser, minCBUser, User:\");\n    }\n    setSearchType(type);\n  }\n  async function handleSearch() {\n    if (searchType === 'content') {\n      // an API call to search content\n      const response = await fetch(`http://localhost:8080/searchContent?searchTerm=${searchTerm}`);\n      const data = await response.json();\n      if (data.length === 0) {\n        // it means we don't have any related content in the database so just alert the user \n        alert(\"No content found!\");\n        setSearchTerm(\"\");\n      } else {\n        // Show the result posts list\n        // but it was giving errors when passing list in the URL so I decided to pass the search term and do the fetch call on the results page \n        // itself and we are guranteed to have results in this approach\n        navigate(`/showResultPostList/${searchTerm}/${username}`);\n        setSearchTerm(\"\");\n      }\n    } else {\n      // Searching Users\n      // In users currently we can only search for the keywords that we gave because I don't know how to do it without keywords at the moment\n      if (searchTerm.includes(\"mostPopularUser\")) {\n        alert(\"yay\");\n        setSearchTerm(\"\");\n      }\n    }\n  }\n  function handleSearchBarClick() {\n    setShowSearchOptions(true);\n  }\n  function handleSearchBarBlur() {\n    // Adding a small delay to allow the click event on search options to trigger first\n    setTimeout(() => setShowSearchOptions(false), 200);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value),\n        onFocus: handleSearchBarClick,\n        onBlur: handleSearchBarBlur,\n        placeholder: `Search ${searchType === 'content' ? 'Content' : 'User'}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), showSearchOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"content\",\n          checked: searchType === 'content',\n          onChange: () => handleSearchTypeChange('content')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), \"Content\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"user\",\n          checked: searchType === 'user',\n          onChange: () => handleSearchTypeChange('user')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), \"User\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"8mMQc7i57LS8bD17MYnkLTzKBI4=\", false, function () {\n  return [useNavigate];\n});\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","SearchResultPostList","jsxDEV","_jsxDEV","Search","username","_s","searchType","setSearchType","searchTerm","setSearchTerm","showSearchOptions","setShowSearchOptions","navigate","handleSearchTypeChange","type","alert","handleSearch","response","fetch","data","json","length","includes","handleSearchBarClick","handleSearchBarBlur","setTimeout","className","children","value","onChange","e","target","onFocus","onBlur","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","checked","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/Search.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Search.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SearchResultPostList from './SearchResultPostList';\r\n\r\nconst Search = ({username}) => {\r\n  const [searchType, setSearchType] = useState('content');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [showSearchOptions, setShowSearchOptions] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  function handleSearchTypeChange(type) {\r\n    if(type === 'user')\r\n    {\r\n        // Alert the user for the key words that they can search for\r\n        alert(\"keywords: mostPopularUser, minPopularUser, mostCBUser, minCBUser, User:\");\r\n    }\r\n    setSearchType(type);\r\n  }\r\n\r\n  async function handleSearch() {\r\n    if(searchType === 'content')\r\n    {\r\n        // an API call to search content\r\n        const response = await fetch(`http://localhost:8080/searchContent?searchTerm=${searchTerm}`);\r\n\r\n        const data = await response.json();\r\n        if(data.length === 0)\r\n        {\r\n            // it means we don't have any related content in the database so just alert the user \r\n            alert(\"No content found!\");\r\n            setSearchTerm(\"\");\r\n        }\r\n        else\r\n        {\r\n            // Show the result posts list\r\n            // but it was giving errors when passing list in the URL so I decided to pass the search term and do the fetch call on the results page \r\n            // itself and we are guranteed to have results in this approach\r\n            navigate(`/showResultPostList/${searchTerm}/${username}`);\r\n            setSearchTerm(\"\");\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // Searching Users\r\n        // In users currently we can only search for the keywords that we gave because I don't know how to do it without keywords at the moment\r\n        if(searchTerm.includes(\"mostPopularUser\"))\r\n        {\r\n            alert(\"yay\");\r\n            setSearchTerm(\"\");\r\n        }\r\n    }\r\n  }\r\n\r\n  function handleSearchBarClick() {\r\n    setShowSearchOptions(true);\r\n  }\r\n\r\n  function handleSearchBarBlur() {\r\n    // Adding a small delay to allow the click event on search options to trigger first\r\n    setTimeout(() => setShowSearchOptions(false), 200);\r\n  }\r\n\r\n  return (\r\n    <div className='search-bar'>\r\n      <div className=\"search-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          onFocus={handleSearchBarClick}\r\n          onBlur={handleSearchBarBlur}\r\n          placeholder={`Search ${searchType === 'content' ? 'Content' : 'User'}`}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n      {showSearchOptions && (\r\n        <div className=\"search-options\">\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"content\"\r\n              checked={searchType === 'content'}\r\n              onChange={() => handleSearchTypeChange('content')}\r\n            />\r\n            Content\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"user\"\r\n              checked={searchType === 'user'}\r\n              onChange={() => handleSearchTypeChange('user')}\r\n            />\r\n            User\r\n          </label>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}