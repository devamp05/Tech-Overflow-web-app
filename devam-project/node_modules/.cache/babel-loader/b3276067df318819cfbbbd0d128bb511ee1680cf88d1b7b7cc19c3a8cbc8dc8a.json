{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\CommentsList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './CommentList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CommentList() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\n  const [newComment, setNewComment] = useState(''); // Track the content of the new comment\n  const {\n    username,\n    postId\n  } = useParams();\n  useEffect(() => {\n    // Fetch comments initially\n    getComments();\n  });\n  function getComments() {\n    fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response.json()).then(response => setComments(response)).catch(error => console.error(error));\n  }\n\n  // function fetchChildComments(commentId, indentLevel = 1) {\n  //   fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-type': 'application/x-www-form-urlencoded',\n  //     },\n  //   })\n  //     .then((response) => response.json())\n  //     .then((childComments) => {\n  //       // Recursively fetch and display child comments\n  //       childComments.forEach((childComment) => {\n  //         fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\n  //       });\n  //       setComments([...comments, { ...childComments[0], indentLevel }]);\n  //     })\n  //     .catch((error) => console.error(error));\n  // }\n\n  function fetchChildComments(commentId, indentLevel = 1) {\n    fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response.json()).then(childComments => {\n      // Recursively fetch and display child comments\n      childComments.forEach(childComment => {\n        fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\n      });\n\n      // Map the child comments to include the indent level\n      const childCommentsWithIndent = childComments.map(childComment => ({\n        ...childComment,\n        indentLevel\n      }));\n\n      // Update the state with the new child comments\n      setComments([...comments, ...childCommentsWithIndent]);\n    }).catch(error => console.error(error));\n  }\n  function handleReply(commentId) {\n    // Set the comment being replied to and clear the new comment input\n    setReplyingTo(commentId);\n    setNewComment('');\n  }\n  function handleCancelReply() {\n    // Clear the comment being replied to\n    setReplyingTo(null);\n  }\n  function handlePostReply(commentId) {\n    console.log(`Post reply to comment ${commentId}: ${newComment}`);\n\n    // Add the comment in the database\n    fetch('http://localhost:8080/addChildComment', {\n      method: 'POST',\n      body: new URLSearchParams({\n        username: username,\n        comment: newComment,\n        parentId: commentId\n      }),\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response).then(data => console.log(data)).catch(error => console.log(error));\n    getComments();\n\n    // Clear the comment being replied to and reset the new comment input\n    setReplyingTo(null);\n    setNewComment('');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"commentsListClass\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Posted comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `comment-item indent-${comment.indentLevel}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-username\",\n            children: [comment.createdBy, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), \" \", comment.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reply-button\",\n          onClick: () => handleReply(comment.c_id),\n          children: [\"Reply \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel), replyingTo === comment.c_id && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your reply...\",\n          value: newComment,\n          onChange: e => setNewComment(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-reply-button\",\n          onClick: () => handlePostReply(comment.c_id),\n          children: \"Post Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-reply-button\",\n          onClick: handleCancelReply,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentList, \"Pmy44k0J1K/KYvpmHwLs2qWqRCA=\", false, function () {\n  return [useParams];\n});\n_c = CommentList;\n;\nexport default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","CommentList","_s","comments","setComments","replyingTo","setReplyingTo","newComment","setNewComment","username","postId","getComments","fetch","method","headers","then","response","json","catch","error","console","fetchChildComments","commentId","indentLevel","childComments","forEach","childComment","id","childCommentsWithIndent","map","handleReply","handleCancelReply","handlePostReply","log","body","URLSearchParams","comment","parentId","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","createdBy","onClick","c_id","numbe_of_child_comments","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/CommentsList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './CommentList.css';\r\n\r\nfunction CommentList() {\r\n  const [comments, setComments] = useState([]);\r\n  const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\r\n  const [newComment, setNewComment] = useState(''); // Track the content of the new comment\r\n  const { username, postId } = useParams();\r\n\r\n  useEffect(() => {\r\n    // Fetch comments initially\r\n    getComments();\r\n  });\r\n\r\n  function getComments() {\r\n    fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => setComments(response))\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  // function fetchChildComments(commentId, indentLevel = 1) {\r\n  //   fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n  //     method: 'GET',\r\n  //     headers: {\r\n  //       'Content-type': 'application/x-www-form-urlencoded',\r\n  //     },\r\n  //   })\r\n  //     .then((response) => response.json())\r\n  //     .then((childComments) => {\r\n  //       // Recursively fetch and display child comments\r\n  //       childComments.forEach((childComment) => {\r\n  //         fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\r\n  //       });\r\n  //       setComments([...comments, { ...childComments[0], indentLevel }]);\r\n  //     })\r\n  //     .catch((error) => console.error(error));\r\n  // }\r\n\r\n  function fetchChildComments(commentId, indentLevel = 1) {\r\n    fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((childComments) => {\r\n        // Recursively fetch and display child comments\r\n        childComments.forEach((childComment) => {\r\n          fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\r\n        });\r\n  \r\n        // Map the child comments to include the indent level\r\n        const childCommentsWithIndent = childComments.map((childComment) => ({\r\n          ...childComment,\r\n          indentLevel,\r\n        }));\r\n  \r\n        // Update the state with the new child comments\r\n        setComments([...comments, ...childCommentsWithIndent]);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  function handleReply(commentId) {\r\n    // Set the comment being replied to and clear the new comment input\r\n    setReplyingTo(commentId);\r\n    setNewComment('');\r\n  }\r\n\r\n  function handleCancelReply() {\r\n    // Clear the comment being replied to\r\n    setReplyingTo(null);\r\n  }\r\n\r\n  function handlePostReply(commentId) {\r\n    console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n    // Add the comment in the database\r\n    fetch('http://localhost:8080/addChildComment', {\r\n      method: 'POST',\r\n      body: new URLSearchParams({\r\n        username: username,\r\n        comment: newComment,\r\n        parentId: commentId\r\n      }),\r\n      headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n      }\r\n    }).then((response) => response)\r\n    .then((data)=> console.log(data))\r\n    .catch(error => console.log(error));\r\n\r\n    getComments();\r\n\r\n    // Clear the comment being replied to and reset the new comment input\r\n    setReplyingTo(null);\r\n    setNewComment('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"commentsListClass\">\r\n      <p>Posted comments:</p>\r\n      {comments.map((comment) => (\r\n        <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n          <div className=\"comment-content\">\r\n            <p>\r\n              <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n            </p>\r\n          </div>\r\n          <div className=\"reply-button-container\">\r\n            <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n              Reply <i className=\"fa fa-reply\"></i>\r\n            </button>\r\n          </div>\r\n          {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\r\n          {replyingTo === comment.c_id && (\r\n            <div className=\"reply-input-container\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type your reply...\"\r\n                value={newComment}\r\n                onChange={(e) => setNewComment(e.target.value)}\r\n              />\r\n              <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n                Post Reply\r\n              </button>\r\n              <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}