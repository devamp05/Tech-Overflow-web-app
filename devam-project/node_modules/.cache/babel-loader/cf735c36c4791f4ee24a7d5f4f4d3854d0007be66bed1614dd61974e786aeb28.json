{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devam\\\\CMPT353\\\\Project\\\\devam-project\\\\src\\\\CommentsList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './CommentList.css';\n\n// function CommentList() {\n//   const [comments, setComments] = useState([]);\n//   const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\n//   const [newComment, setNewComment] = useState(''); // Track the content of the new comment\n//   const { username, postId } = useParams();\n\n//   // useEffect(() => {\n//   //   // Fetch comments initially\n//   //   getComments();\n//   // },[]);\n\n//   function getComments() {\n//     fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       },\n//     })\n//       .then((response) => response.json())\n//       .then((response) => setComments(response))\n//       .catch((error) => console.error(error));\n//   }\n\n//   // function fetchChildComments(commentId, indentLevel = 1) {\n//   //   fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n//   //     method: 'GET',\n//   //     headers: {\n//   //       'Content-type': 'application/x-www-form-urlencoded',\n//   //     },\n//   //   })\n//   //     .then((response) => response.json())\n//   //     .then((childComments) => {\n//   //       // Recursively fetch and display child comments\n//   //       childComments.forEach((childComment) => {\n//   //         fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\n//   //       });\n//   //       setComments([...comments, { ...childComments[0], indentLevel }]);\n//   //     })\n//   //     .catch((error) => console.error(error));\n//   // }\n\n//   async function fetchChildComments(commentId, indentLevel = 1) {\n//     try {\n//       const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n//         method: 'GET',\n//         headers: {\n//           'Content-type': 'application/x-www-form-urlencoded',\n//         },\n//       });\n\n//       const childComments = await response.json();\n\n//       if (childComments.length > 0) {\n//         // Recursively fetch and display child comments\n//         for (const childComment of childComments) {\n//           await fetchChildComments(childComment.id, indentLevel + 1);\n//         }\n\n//         const childCommentsWithIndent = childComments.map((childComment) => ({\n//           ...childComment,\n//           indentLevel,\n//         }));\n\n//         setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\n//       }\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   useEffect(() => {\n//     getComments();\n\n//     // Fetch child comments when the component mounts\n//     if (comments.length > 0) {\n//       comments.forEach((comment) => {\n//         if (comment.numbe_of_child_comments > 0) {\n//           fetchChildComments(comment.c_id, comment.indentLevel);\n//         }\n//       });\n//     }\n//   }, [comments]); // Run this effect whenever comments change\n\n//   function handleReply(commentId) {\n//     // Set the comment being replied to and clear the new comment input\n//     setReplyingTo(commentId);\n//     setNewComment('');\n//   }\n\n//   function handleCancelReply() {\n//     // Clear the comment being replied to\n//     setReplyingTo(null);\n//   }\n\n//   function handlePostReply(commentId) {\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\n\n//     // Add the comment in the database\n//     fetch('http://localhost:8080/addChildComment', {\n//       method: 'POST',\n//       body: new URLSearchParams({\n//         username: username,\n//         comment: newComment,\n//         parentId: commentId\n//       }),\n//       headers: {\n//         'Content-type': 'application/x-www-form-urlencoded',\n//       }\n//     }).then((response) => response)\n//     .then((data)=> console.log(data))\n//     .catch(error => console.log(error));\n\n//     // Clear the comment being replied to and reset the new comment input\n//     setReplyingTo(null);\n//     setNewComment('');\n//   }\n\n//   // return (\n//   //   <div className=\"commentsListClass\">\n//   //     <p>Posted comments:</p>\n//   //     {comments.map((comment) => (\n//   //       <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\n//   //         <div className=\"comment-content\">\n//   //           <p>\n//   //             <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n//   //           </p>\n//   //         </div>\n//   //         <div className=\"reply-button-container\">\n//   //           <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\n//   //             Reply <i className=\"fa fa-reply\"></i>\n//   //           </button>\n//   //         </div>\n//   //         {comment.numbe_of_child_comments}\n//   //         {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\n//   //         {replyingTo === comment.c_id && (\n//   //           <div className=\"reply-input-container\">\n//   //             <input\n//   //               type=\"text\"\n//   //               placeholder=\"Type your reply...\"\n//   //               value={newComment}\n//   //               onChange={(e) => setNewComment(e.target.value)}\n//   //             />\n//   //             <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\n//   //               Post Reply\n//   //             </button>\n//   //             <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\n//   //               Cancel\n//   //             </button>\n//   //           </div>\n//   //         )}\n//   //       </div>\n//   //     ))}\n//   //   </div>\n//   // );\n\n//   return (\n//     <div className=\"commentsListClass\">\n//       <p>Posted comments:</p>\n//       {comments.map((comment) => (\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\n//           <div className=\"comment-content\">\n//             <p>\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\n//             </p>\n//           </div>\n//           <div className=\"reply-button-container\">\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\n//               Reply <i className=\"fa fa-reply\"></i>\n//             </button>\n//           </div>\n//           {comment.numbe_of_child_comments > 0 && (\n//             <div className=\"child-comments-container\">\n//               {/* Render child comments here */}\n//               {/* You can use a separate mapping or recursion */}\n//             </div>\n//           )}\n//           {replyingTo === comment.c_id && (\n//             <div className=\"reply-input-container\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Type your reply...\"\n//                 value={newComment}\n//                 onChange={(e) => setNewComment(e.target.value)}\n//               />\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\n//                 Post Reply\n//               </button>\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\n//                 Cancel\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default CommentList;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CommentList() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [replyingTo, setReplyingTo] = useState(null);\n  const [newComment, setNewComment] = useState('');\n  const {\n    username,\n    postId\n  } = useParams();\n  async function fetchComments() {\n    try {\n      const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const data = await response.json();\n      setComments(data);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }\n  async function fetchChildComments(commentId, indentLevel = 1) {\n    try {\n      const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const childComments = await response.json();\n      if (childComments.length > 0) {\n        for (const childComment of childComments) {\n          await fetchChildComments(childComment.id, indentLevel + 1);\n        }\n        const childCommentsWithIndent = childComments.map(childComment => ({\n          ...childComment,\n          indentLevel\n        }));\n        setComments(prevComments => [...prevComments, ...childCommentsWithIndent]);\n      }\n    } catch (error) {\n      console.error('Error fetching child comments:', error);\n    }\n  }\n  useEffect(() => {\n    fetchComments();\n  }, [postId]);\n  function handleReply(commentId) {\n    setReplyingTo(commentId);\n    setNewComment('');\n  }\n  function handleCancelReply() {\n    setReplyingTo(null);\n  }\n  async function handlePostReply(commentId) {\n    try {\n      console.log(`Post reply to comment ${commentId}: ${newComment}`);\n      await fetch('http://localhost:8080/addChildComment', {\n        method: 'POST',\n        body: new URLSearchParams({\n          username: username,\n          comment: newComment,\n          parentId: commentId\n        }),\n        headers: {\n          'Content-type': 'application/x-www-form-urlencoded'\n        }\n      });\n      await fetchComments(); // Refresh comments after posting a reply\n      setReplyingTo(null);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error posting reply:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"commentsListClass\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Posted comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `comment-item indent-${comment.indentLevel}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-username\",\n            children: [comment.createdBy, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this), \" \", comment.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reply-button\",\n          onClick: () => handleReply(comment.c_id),\n          children: [\"Reply \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel), replyingTo === comment.c_id && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your reply...\",\n          value: newComment,\n          onChange: e => setNewComment(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-reply-button\",\n          onClick: () => handlePostReply(comment.c_id),\n          children: \"Post Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-reply-button\",\n          onClick: handleCancelReply,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 13\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentList, \"Pmy44k0J1K/KYvpmHwLs2qWqRCA=\", false, function () {\n  return [useParams];\n});\n_c = CommentList;\nexport default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","CommentList","_s","comments","setComments","replyingTo","setReplyingTo","newComment","setNewComment","username","postId","fetchComments","response","fetch","method","headers","data","json","error","console","fetchChildComments","commentId","indentLevel","childComments","length","childComment","id","childCommentsWithIndent","map","prevComments","handleReply","handleCancelReply","handlePostReply","log","body","URLSearchParams","comment","parentId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","createdBy","onClick","c_id","numbe_of_child_comments","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/devam/CMPT353/Project/devam-project/src/CommentsList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './CommentList.css';\r\n\r\n// function CommentList() {\r\n//   const [comments, setComments] = useState([]);\r\n//   const [replyingTo, setReplyingTo] = useState(null); // Track the comment being replied to\r\n//   const [newComment, setNewComment] = useState(''); // Track the content of the new comment\r\n//   const { username, postId } = useParams();\r\n\r\n//   // useEffect(() => {\r\n//   //   // Fetch comments initially\r\n//   //   getComments();\r\n//   // },[]);\r\n\r\n//   function getComments() {\r\n//     fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       },\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then((response) => setComments(response))\r\n//       .catch((error) => console.error(error));\r\n//   }\r\n\r\n//   // function fetchChildComments(commentId, indentLevel = 1) {\r\n//   //   fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n//   //     method: 'GET',\r\n//   //     headers: {\r\n//   //       'Content-type': 'application/x-www-form-urlencoded',\r\n//   //     },\r\n//   //   })\r\n//   //     .then((response) => response.json())\r\n//   //     .then((childComments) => {\r\n//   //       // Recursively fetch and display child comments\r\n//   //       childComments.forEach((childComment) => {\r\n//   //         fetchChildComments(childComment.id, indentLevel + 1); // Increase the indent level for each level of nesting\r\n//   //       });\r\n//   //       setComments([...comments, { ...childComments[0], indentLevel }]);\r\n//   //     })\r\n//   //     .catch((error) => console.error(error));\r\n//   // }\r\n\r\n//   async function fetchChildComments(commentId, indentLevel = 1) {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-type': 'application/x-www-form-urlencoded',\r\n//         },\r\n//       });\r\n\r\n//       const childComments = await response.json();\r\n\r\n//       if (childComments.length > 0) {\r\n//         // Recursively fetch and display child comments\r\n//         for (const childComment of childComments) {\r\n//           await fetchChildComments(childComment.id, indentLevel + 1);\r\n//         }\r\n\r\n//         const childCommentsWithIndent = childComments.map((childComment) => ({\r\n//           ...childComment,\r\n//           indentLevel,\r\n//         }));\r\n\r\n//         setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     getComments();\r\n\r\n//     // Fetch child comments when the component mounts\r\n//     if (comments.length > 0) {\r\n//       comments.forEach((comment) => {\r\n//         if (comment.numbe_of_child_comments > 0) {\r\n//           fetchChildComments(comment.c_id, comment.indentLevel);\r\n//         }\r\n//       });\r\n//     }\r\n//   }, [comments]); // Run this effect whenever comments change\r\n\r\n  \r\n  \r\n  \r\n\r\n//   function handleReply(commentId) {\r\n//     // Set the comment being replied to and clear the new comment input\r\n//     setReplyingTo(commentId);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   function handleCancelReply() {\r\n//     // Clear the comment being replied to\r\n//     setReplyingTo(null);\r\n//   }\r\n\r\n//   function handlePostReply(commentId) {\r\n//     console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n//     // Add the comment in the database\r\n//     fetch('http://localhost:8080/addChildComment', {\r\n//       method: 'POST',\r\n//       body: new URLSearchParams({\r\n//         username: username,\r\n//         comment: newComment,\r\n//         parentId: commentId\r\n//       }),\r\n//       headers: {\r\n//         'Content-type': 'application/x-www-form-urlencoded',\r\n//       }\r\n//     }).then((response) => response)\r\n//     .then((data)=> console.log(data))\r\n//     .catch(error => console.log(error));\r\n\r\n//     // Clear the comment being replied to and reset the new comment input\r\n//     setReplyingTo(null);\r\n//     setNewComment('');\r\n//   }\r\n\r\n//   // return (\r\n//   //   <div className=\"commentsListClass\">\r\n//   //     <p>Posted comments:</p>\r\n//   //     {comments.map((comment) => (\r\n//   //       <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n//   //         <div className=\"comment-content\">\r\n//   //           <p>\r\n//   //             <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n//   //           </p>\r\n//   //         </div>\r\n//   //         <div className=\"reply-button-container\">\r\n//   //           <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n//   //             Reply <i className=\"fa fa-reply\"></i>\r\n//   //           </button>\r\n//   //         </div>\r\n//   //         {comment.numbe_of_child_comments}\r\n//   //         {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\r\n//   //         {replyingTo === comment.c_id && (\r\n//   //           <div className=\"reply-input-container\">\r\n//   //             <input\r\n//   //               type=\"text\"\r\n//   //               placeholder=\"Type your reply...\"\r\n//   //               value={newComment}\r\n//   //               onChange={(e) => setNewComment(e.target.value)}\r\n//   //             />\r\n//   //             <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n//   //               Post Reply\r\n//   //             </button>\r\n//   //             <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n//   //               Cancel\r\n//   //             </button>\r\n//   //           </div>\r\n//   //         )}\r\n//   //       </div>\r\n//   //     ))}\r\n//   //   </div>\r\n//   // );\r\n\r\n\r\n//   return (\r\n//     <div className=\"commentsListClass\">\r\n//       <p>Posted comments:</p>\r\n//       {comments.map((comment) => (\r\n//         <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n//           <div className=\"comment-content\">\r\n//             <p>\r\n//               <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"reply-button-container\">\r\n//             <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n//               Reply <i className=\"fa fa-reply\"></i>\r\n//             </button>\r\n//           </div>\r\n//           {comment.numbe_of_child_comments > 0 && (\r\n//             <div className=\"child-comments-container\">\r\n//               {/* Render child comments here */}\r\n//               {/* You can use a separate mapping or recursion */}\r\n//             </div>\r\n//           )}\r\n//           {replyingTo === comment.c_id && (\r\n//             <div className=\"reply-input-container\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Type your reply...\"\r\n//                 value={newComment}\r\n//                 onChange={(e) => setNewComment(e.target.value)}\r\n//               />\r\n//               <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n//                 Post Reply\r\n//               </button>\r\n//               <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n//                 Cancel\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CommentList;\r\n\r\n\r\nfunction CommentList() {\r\n  const [comments, setComments] = useState([]);\r\n  const [replyingTo, setReplyingTo] = useState(null);\r\n  const [newComment, setNewComment] = useState('');\r\n  const { username, postId } = useParams();\r\n\r\n  async function fetchComments() {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/getComments?postId=${postId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-type': 'application/x-www-form-urlencoded',\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      setComments(data);\r\n    } catch (error) {\r\n      console.error('Error fetching comments:', error);\r\n    }\r\n  }\r\n\r\n  async function fetchChildComments(commentId, indentLevel = 1) {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/getChildComments?parentId=${commentId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-type': 'application/x-www-form-urlencoded',\r\n        },\r\n      });\r\n      const childComments = await response.json();\r\n\r\n      if (childComments.length > 0) {\r\n        for (const childComment of childComments) {\r\n          await fetchChildComments(childComment.id, indentLevel + 1);\r\n        }\r\n\r\n        const childCommentsWithIndent = childComments.map((childComment) => ({\r\n          ...childComment,\r\n          indentLevel,\r\n        }));\r\n\r\n        setComments((prevComments) => [...prevComments, ...childCommentsWithIndent]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching child comments:', error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [postId]);\r\n\r\n  function handleReply(commentId) {\r\n    setReplyingTo(commentId);\r\n    setNewComment('');\r\n  }\r\n\r\n  function handleCancelReply() {\r\n    setReplyingTo(null);\r\n  }\r\n\r\n  async function handlePostReply(commentId) {\r\n    try {\r\n      console.log(`Post reply to comment ${commentId}: ${newComment}`);\r\n\r\n      await fetch('http://localhost:8080/addChildComment', {\r\n        method: 'POST',\r\n        body: new URLSearchParams({\r\n          username: username,\r\n          comment: newComment,\r\n          parentId: commentId,\r\n        }),\r\n        headers: {\r\n          'Content-type': 'application/x-www-form-urlencoded',\r\n        },\r\n      });\r\n\r\n      await fetchComments(); // Refresh comments after posting a reply\r\n      setReplyingTo(null);\r\n      setNewComment('');\r\n    } catch (error) {\r\n      console.error('Error posting reply:', error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"commentsListClass\">\r\n      <p>Posted comments:</p>\r\n      {comments.map((comment) => (\r\n        <div key={comment.id} className={`comment-item indent-${comment.indentLevel}`}>\r\n          <div className=\"comment-content\">\r\n            <p>\r\n              <span className=\"comment-username\">{comment.createdBy}:</span> {comment.comment}\r\n            </p>\r\n          </div>\r\n          <div className=\"reply-button-container\">\r\n            <button className=\"reply-button\" onClick={() => handleReply(comment.c_id)}>\r\n              Reply <i className=\"fa fa-reply\"></i>\r\n            </button>\r\n          </div>\r\n          {comment.numbe_of_child_comments > 0 && fetchChildComments(comment.c_id, comment.indentLevel)}\r\n          {replyingTo === comment.c_id && (\r\n            <div className=\"reply-input-container\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type your reply...\"\r\n                value={newComment}\r\n                onChange={(e) => setNewComment(e.target.value)}\r\n              />\r\n              <button className=\"post-reply-button\" onClick={() => handlePostReply(comment.c_id)}>\r\n                Post Reply\r\n              </button>\r\n              <button className=\"cancel-reply-button\" onClick={handleCancelReply}>\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommentList;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,mBAAmB;;AAE1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM;IAAEa,QAAQ;IAAEC;EAAO,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAExC,eAAea,aAAaA,CAAA,EAAG;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2CH,MAAO,EAAC,EAAE;QACjFI,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCb,WAAW,CAACY,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF;EAEA,eAAeE,kBAAkBA,CAACC,SAAS,EAAEC,WAAW,GAAG,CAAC,EAAE;IAC5D,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,mDAAkDQ,SAAU,EAAC,EAAE;QAC3FP,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMQ,aAAa,GAAG,MAAMX,QAAQ,CAACK,IAAI,CAAC,CAAC;MAE3C,IAAIM,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;QAC5B,KAAK,MAAMC,YAAY,IAAIF,aAAa,EAAE;UACxC,MAAMH,kBAAkB,CAACK,YAAY,CAACC,EAAE,EAAEJ,WAAW,GAAG,CAAC,CAAC;QAC5D;QAEA,MAAMK,uBAAuB,GAAGJ,aAAa,CAACK,GAAG,CAAEH,YAAY,KAAM;UACnE,GAAGA,YAAY;UACfH;QACF,CAAC,CAAC,CAAC;QAEHlB,WAAW,CAAEyB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE,GAAGF,uBAAuB,CAAC,CAAC;MAC9E;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF;EAEArB,SAAS,CAAC,MAAM;IACdc,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACD,MAAM,CAAC,CAAC;EAEZ,SAASoB,WAAWA,CAACT,SAAS,EAAE;IAC9Bf,aAAa,CAACe,SAAS,CAAC;IACxBb,aAAa,CAAC,EAAE,CAAC;EACnB;EAEA,SAASuB,iBAAiBA,CAAA,EAAG;IAC3BzB,aAAa,CAAC,IAAI,CAAC;EACrB;EAEA,eAAe0B,eAAeA,CAACX,SAAS,EAAE;IACxC,IAAI;MACFF,OAAO,CAACc,GAAG,CAAE,yBAAwBZ,SAAU,KAAId,UAAW,EAAC,CAAC;MAEhE,MAAMM,KAAK,CAAC,uCAAuC,EAAE;QACnDC,MAAM,EAAE,MAAM;QACdoB,IAAI,EAAE,IAAIC,eAAe,CAAC;UACxB1B,QAAQ,EAAEA,QAAQ;UAClB2B,OAAO,EAAE7B,UAAU;UACnB8B,QAAQ,EAAEhB;QACZ,CAAC,CAAC;QACFN,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMJ,aAAa,CAAC,CAAC,CAAC,CAAC;MACvBL,aAAa,CAAC,IAAI,CAAC;MACnBE,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF;EAEA,oBACElB,OAAA;IAAKsC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCvC,OAAA;MAAAuC,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACtBxC,QAAQ,CAACyB,GAAG,CAAEQ,OAAO,iBACpBpC,OAAA;MAAsBsC,SAAS,EAAG,uBAAsBF,OAAO,CAACd,WAAY,EAAE;MAAAiB,QAAA,gBAC5EvC,OAAA;QAAKsC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9BvC,OAAA;UAAAuC,QAAA,gBACEvC,OAAA;YAAMsC,SAAS,EAAC,kBAAkB;YAAAC,QAAA,GAAEH,OAAO,CAACQ,SAAS,EAAC,GAAC;UAAA;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,KAAC,EAACP,OAAO,CAACA,OAAO;QAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9E;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACN3C,OAAA;QAAKsC,SAAS,EAAC,wBAAwB;QAAAC,QAAA,eACrCvC,OAAA;UAAQsC,SAAS,EAAC,cAAc;UAACO,OAAO,EAAEA,CAAA,KAAMf,WAAW,CAACM,OAAO,CAACU,IAAI,CAAE;UAAAP,QAAA,GAAC,QACnE,eAAAvC,OAAA;YAAGsC,SAAS,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EACLP,OAAO,CAACW,uBAAuB,GAAG,CAAC,IAAI3B,kBAAkB,CAACgB,OAAO,CAACU,IAAI,EAAEV,OAAO,CAACd,WAAW,CAAC,EAC5FjB,UAAU,KAAK+B,OAAO,CAACU,IAAI,iBAC1B9C,OAAA;QAAKsC,SAAS,EAAC,uBAAuB;QAAAC,QAAA,gBACpCvC,OAAA;UACEgD,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,oBAAoB;UAChCC,KAAK,EAAE3C,UAAW;UAClB4C,QAAQ,EAAGC,CAAC,IAAK5C,aAAa,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC,eACF3C,OAAA;UAAQsC,SAAS,EAAC,mBAAmB;UAACO,OAAO,EAAEA,CAAA,KAAMb,eAAe,CAACI,OAAO,CAACU,IAAI,CAAE;UAAAP,QAAA,EAAC;QAEpF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT3C,OAAA;UAAQsC,SAAS,EAAC,qBAAqB;UAACO,OAAO,EAAEd,iBAAkB;UAAAQ,QAAA,EAAC;QAEpE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN;IAAA,GA3BOP,OAAO,CAACV,EAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA4Bf,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzC,EAAA,CAzHQD,WAAW;EAAA,QAIWH,SAAS;AAAA;AAAAwD,EAAA,GAJ/BrD,WAAW;AA2HpB,eAAeA,WAAW;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}